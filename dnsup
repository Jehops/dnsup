#!/bin/sh

# ==============================================================================
# Copyright (c) 2016, Joseph Mingrone.  All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# ==============================================================================

# dnsup - DNS Updater
#
# Run dnsup -h or visit https://github.com/Jehops/dnsup for an overview.
#

# ==============================================================================
fatal () {
    printf "[%s] FATAL: $*\n" "$(date)" > /dev/stderr
    exit 1
}
# ==============================================================================
help () {
    readonly version=0.3

    cat <<EOF
NAME
   ${0##*/} -- DNS Updater

SYNOPSIS
   ${0##*/} [-h|-s]

DESCRIPTION
Update a host's A record when its external IP address changes.  The update is
performed using your DNS provider's API.

Gandi's LiveDNS and GoDaddy's managed DNS service are supported.  Only IPv4
addresses can be updated.  I no longer have any domains registered with Godaddy,
so it has been years since I tesed with them.  Patches are welcomed.

   -h   Print this help message.
   -s   Be silent except upon error.

   The following variables are read from /usr/local/etc/dnsup.conf

   Values require for both Gandi and Godaddy

   provider=<Gandi | GoDaddy>
   key=<Gandi API key | GoDaddy API key>
   ttl=

   Additional values required when provider is Gandi

   domain=
   host=
   record=

   Additional value required when provider is Godaddy

   secret=

   API keys

   Gandi: https://api.gandi.net/
   GoDaddy: https://developer.godaddy.com

COMPATIBILITY
   ${0##*/} is written in POSIX shell.  It requires curl with TLS support and a
   CA certificate store.

EXAMPLE
   $ cat /etc/crontab

   PATH=/etc:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin
   SHELL=/bin/sh

   #minute  hour  mday  month  wday  who    command
   */5      *     *     *      *     dnsup  dnsup >> /var/log/dnsup.log 2>&1
   @reboot                           dnsup  dnsup >> /var/log/dnsup.log 2>&1

AUTHOR
Joseph Mingrone <jrm@ftfl.ca>

VERSION
   ${0##*/} version ${version}

EOF
    exit 0
}
# ==============================================================================
gandi () {

    api='https://dns.api.gandi.net/api/v5/'

    resp=$(curl -L -s -XPUT \
                -d '{"rrset_values": ["'"$ipv4"'"]}' \
                -H "X-Api-Key: $key" \
                -H "Content-type: application/json" \
                "${api}domains/$domain/records/$record/A")

    [ "$resp" = '{"message": "DNS Record Created"}' ]
}


godaddy () {

    resp=$(curl -L -s -XPUT \
                -w '%{http_code}' \
                -H "Authorization: sso-key ${key}:${secret}" \
                -H "Content-type: application/json" \
                -d "[ {\"data\":\"${ip}\",\"ttl\":${ttl}} ]" \
                "https://api.godaddy.com/v1/domains/${domain}/records/A/${host}")

    [ "$resp" = "200" ]
}

if [ $# -gt 1 ] || { [ $# -eq 1 ] && [ "$1" != '-s' ]; }; then
    help
elif [ $# -eq 0 ]; then
    verbose=1
fi
# ==============================================================================

. /usr/local/etc/dnsup.conf

#-------------------------------------------------------------------------------
date=$(date)
fqdn=$(hostname)
domain=${fqdn#*.}
host=${fqdn%%.*}
ip_srv="http://me.gandi.net"
ipv4=$(curl -s4 $ip_srv)
#ipv6=$(curl -s6 $ip_srv)
ipv4_file="/var/db/dnsup_ipv4"
#ipv6_file="/var/db/dnsup_ipv6"
ipv4_regex="\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}\
(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b"
ls_ipv4=$(grep -E "$ipv4_regex" "$ipv4_file" 2>/dev/null) # last sent IP
provider=$(printf "%s" "${provider}" | tr '[:upper:]' '[:lower:]')
#-------------------------------------------------------------------------------

if ! printf "%s" "${ipv4}" | grep -Eq "$ipv4_regex"; then
    fatal "Could not determine public IP address."
fi

if [ "${ipv4}" != "${ls_ipv4}" ]; then
    case ${provider} in
        'gandi')
            gandi && success=true
            ;;
        'godaddy')
            godaddy && success=true
            ;;
        *)
            fatal "Unregognized provider."
    esac
    if [ -n "$success" ]; then
        printf "%s" "${ipv4}" > ${ipv4_file}
        [ -n "${verbose}" ] && \
            printf "[%s] Updated A record from ${ls_ipv4} to ${ipv4}.\n" "${date}"
    else
        fatal "${resp}"
    fi
else
    [ -n "${verbose}" ] && \
        printf "[%s] External IP address is still ${ls_ipv4}.\n" "${date}"
fi
